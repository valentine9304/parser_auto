from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile

from settings import app_settings
from src.parser import parse_response
from src.parser_drom import parse_response_drom
from src.render import generate_test_svg, draw_car_info_on_image

bot = Bot(token=app_settings.TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

user_cars = {}
user_media_messages = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message) -> None:
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ auto.ru, –∏ —è –ø–æ–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
    )


@dp.message_handler(lambda message: message.text.startswith('https://auto.ru'))
async def handle_message(message: types.Message) -> None:
    try:
        if message.from_user.id not in app_settings.ALLOWED_USER_IDS:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return
    except TypeError as e:
        print(app_settings.ALLOWED_USER_IDS)
        print(type(app_settings.ALLOWED_USER_IDS))
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ID: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    url = message.text.strip()
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ {url}")

    car = parse_response(url)
    if not car or not car.images:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫–∞–ø—á–∞.")
        return
    user_cars[message.from_user.id] = car

    media = [
        types.InputMediaPhoto(media=img_url)
        for img_url in car.images[:3]
    ]

    sent_messages = await message.answer_media_group(media)
    user_media_messages[message.from_user.id] = [msg.message_id for msg in sent_messages]

    keyboard = InlineKeyboardMarkup(row_width=3)
    for i in range(min(3, len(car.images))):
        keyboard.insert(
            InlineKeyboardButton(text=f"–§–æ—Ç–æ {i+1}", callback_data=f"photo_{i}")
        )

    additional_text = (
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã—à–µ, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"
        ",–∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –ù–î–°.\n"
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é."
    )


    car_info = str(car)
    if len(car_info) + len(additional_text) > 4096:
        car_info = car_info[:4096 - len(additional_text) - 3] + "..."

    full_car_info = f"{car_info}{additional_text}"

    try:
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await message.answer(full_car_info, reply_markup=keyboard)

@dp.message_handler(lambda message: message.text.startswith('https://auto.drom.ru'))
async def handle_message(message: types.Message) -> None:
    try:
        if message.from_user.id not in app_settings.ALLOWED_USER_IDS:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
            return
    except TypeError as e:
        print(app_settings.ALLOWED_USER_IDS)
        print(type(app_settings.ALLOWED_USER_IDS))
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ID: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    url = message.text.strip()
    print(f"–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ {url}")

    car = parse_response_drom(url)
    if not car or not car.images:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å –∫–∞–ø—á–∞.")
        return
    user_cars[message.from_user.id] = car

    media = [
        types.InputMediaPhoto(media=img_url)
        for img_url in car.images[:3]
    ]

    sent_messages = await message.answer_media_group(media)
    user_media_messages[message.from_user.id] = [msg.message_id for msg in sent_messages]

    keyboard = InlineKeyboardMarkup(row_width=3)
    for i in range(min(3, len(car.images))):
        keyboard.insert(
            InlineKeyboardButton(text=f"–§–æ—Ç–æ {i+1}", callback_data=f"photo_{i}")
        )

    additional_text = (
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤—ã—à–µ, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"
        ",–∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏—Ç–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –ù–î–°.\n"
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é."
    )


    car_info = str(car)
    if len(car_info) + len(additional_text) > 4096:
        car_info = car_info[:4096 - len(additional_text) - 3] + "..."

    full_car_info = f"{car_info}{additional_text}"

    try:
        await message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await message.answer(full_car_info, reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.startswith("photo_"))
async def handle_photo_click(call: CallbackQuery):
    index = int(call.data.split("_")[1])
    car = user_cars.get(call.from_user.id)

    if not car or index >= len(car.images):
        await call.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    vat_keyboard = InlineKeyboardMarkup(row_width=2)
    vat_keyboard.add(
        InlineKeyboardButton(text="—Å –ù–î–°", callback_data=f"vat_yes_{index}"),
        InlineKeyboardButton(text="–±–µ–∑ –ù–î–°", callback_data=f"vat_no_{index}"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Ñ–æ—Ç–æ", callback_data="back_to_photos")
    )

    await call.message.edit_reply_markup(reply_markup=vat_keyboard)
    await call.answer(f"–í—ã–±—Ä–∞–Ω–æ –§–æ—Ç–æ {index+1}")

@dp.callback_query_handler(lambda call: call.data.startswith("vat_"))
async def handle_vat_click(call: CallbackQuery):
    vat_choice, index = call.data.split("_")[1], int(call.data.split("_")[2])
    car = user_cars.get(call.from_user.id)

    if not car:
        await call.answer("–î–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
        return

    nds = True if vat_choice == "yes" else False

    if nds:
        try:
            cleaned_price = car.price.replace("\xa0", "").replace(" ", "")
            new_price_int = int(cleaned_price) * 1.2
            new_price_str = "{:,.0f}".format(new_price_int).replace(",", " ")
            car.price = new_price_str
        except (ValueError, TypeError):
            await call.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã", show_alert=True)

    car_info = str(car)
    if len(car_info) > 4000:
        car_info = car_info[:3950] + "..."
    updated_car_info = f"{car_info} ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."

    try:
        await call.message.edit_text(updated_car_info, reply_markup=None)

    except Exception as e:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    choice_image = car.images[index]

    output_png = generate_test_svg(choice_image, nds)
    output_modified = draw_car_info_on_image(car, output_png)

    media_message_ids = user_media_messages.get(call.from_user.id, [])

    try:
        await call.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

    for msg_id in media_message_ids:
        try:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    user_media_messages.pop(call.from_user.id, None)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    caption = str(car)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ù–î–°
    price_text = car.price if car.price else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    price_with_vat = f"{price_text} P {'—Å –ù–î–°' if nds else '–±–µ–∑ –ù–î–°'}"
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π –≤ caption
    caption_lines = caption.split('\n')
    for i, line in enumerate(caption_lines):
        if line.startswith("–¶–µ–Ω–∞:"):
            caption_lines[i] = f"–¶–µ–Ω–∞: {price_with_vat}"
            break
    caption = '\n'.join(caption_lines)

    # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1000 —Å–∏–º–≤–æ–ª–æ–≤
    if len(caption) > 1000:
        caption = caption[:950] + "..."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
    await call.message.answer_photo(
        photo=InputFile(output_modified, filename="car_info.png"),
        caption=caption
    )

if __name__ == "__main__":
    if not app_settings.TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN not found in .env file!")

    print("Bot is running...")
    executor.start_polling(dp, skip_updates=True)
