"""Project schemas."""

from dataclasses import dataclass, field
from typing import Optional, List

@dataclass
class Car:
    id: int = None
    name: str = ""
    price: Optional[str] = 0
    year: str = "–ù–æ–≤—ã–π –≥–æ–¥"
    mileage: str = "–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
    engine: str = "–ù–æ–≤—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å"
    transmission: str = "–ù–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è"
    color: str = "–ù–æ–≤—ã–π —Ü–≤–µ—Ç"
    drive: str = "–ù–æ–≤—ã–π –ø—Ä–∏–≤–æ–¥"
    images: List[str] = field(default_factory=list)
    url: str = " –ù–µ—Ç –∞–¥—Ä–µ—Å—Å–∞"

    def __post_init__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç '–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', –µ—Å–ª–∏ –ø—Ä–æ–±–µ–≥ –º–µ–Ω—å—à–µ 500."""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å mileage –≤ —á–∏—Å–ª–æ, —É–±–∏—Ä–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            mileage_value = int(self.mileage.replace('\xa0', '').replace(' ', '').replace('–∫–º', ''))
            if mileage_value < 500:
                self.mileage = "–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
        except (ValueError, AttributeError):
            # –ï—Å–ª–∏ mileage –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            pass

    def __str__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        clean = lambda s: str(s).replace('\xa0', ' ').strip() if s else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        return (
            "üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ üöó\n"
            # f"ID: {clean(self.id) if self.id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {clean(self.name) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–¶–µ–Ω–∞: {clean(self.price) + ' P' if self.price else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"–ì–æ–¥: {clean(self.year)}\n"
            f"–ü—Ä–æ–±–µ–≥: {clean(self.mileage)}\n"
            f"–î–≤–∏–≥–∞—Ç–µ–ª—å: {clean(self.engine)}\n"
            f"–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è: {clean(self.transmission)}\n"
            f"–¶–≤–µ—Ç: {clean(self.color)}\n"
            f"–ü—Ä–∏–≤–æ–¥: {clean(self.drive)}\n"
            f"URL: {clean(self.url)}\n\n"
        )

    def __repr__(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ, –Ω–æ —á–∏—Ç–∞–µ–º–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –æ—Ç–ª–∞–¥–∫–∏."""
        return self.__str__()
